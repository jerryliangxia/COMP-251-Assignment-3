{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;\f2\fnil\fcharset0 Menlo-BoldItalic;
}
{\colortbl;\red255\green255\blue255;\red204\green108\blue29;\red217\green232\blue247;\red230\green230\blue250;
\red18\green144\blue195;\red249\green250\blue244;\red30\green181\blue64;\red121\green171\blue255;\red128\green128\blue128;
\red242\green242\blue0;\red102\green225\blue248;\red104\green151\blue187;\red150\green236\blue63;\red243\green236\blue121;
\red167\green236\blue33;\red23\green198\blue163;\red141\green218\blue248;}
{\*\expandedcolortbl;;\csgenericrgb\c80000\c42353\c11373;\csgenericrgb\c85098\c90980\c96863;\csgenericrgb\c90196\c90196\c98039;
\csgenericrgb\c7059\c56471\c76471;\csgenericrgb\c97647\c98039\c95686;\csgenericrgb\c11765\c70980\c25098;\csgenericrgb\c47451\c67059\c100000;\csgenericrgb\c50196\c50196\c50196;
\csgenericrgb\c94902\c94902\c0;\csgenericrgb\c40000\c88235\c97255;\csgenericrgb\c40784\c59216\c73333;\csgenericrgb\c58824\c92549\c24706;\csgenericrgb\c95294\c92549\c47451;
\csgenericrgb\c65490\c92549\c12941;\csgenericrgb\c9020\c77647\c63922;\csgenericrgb\c55294\c85490\c97255;}
\margl1440\margr1440\vieww9680\viewh6580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs20 \cf2 import\cf3  java\cf4 .\cf3 io\cf4 .\cf3 File\cf4 ;\cf0 \
\cf2 import\cf3  java\cf4 .\cf3 io\cf4 .\cf3 FileNotFoundException\cf4 ;\cf0 \
\cf2 import\cf3  java\cf4 .\cf3 util\cf4 .*;\cf0 \
\
\cf2 public\cf3  \cf2 class\cf3  \cf5 Honors\cf3  \cf6 \{\cf0 \
\cf3 	\cf0 \
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf2 int\cf3  \cf7 min_moves\cf6 (\cf2 int\cf6 [][]\cf3  \cf8 board\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 		\cf0 \
\cf3 		\cf9 // use bfs (kind of like creating a graph) - don't initialize the graph\cf0 \
\cf3 		\cf9 // use bfs to create the graph - since there are a lot of nodes, maybe just edit the actual value in the graph itself\cf0 \
\
\cf3 		\cf2 boolean\cf6 [][]\cf3  \cf10 visited\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf2 boolean\cf6 [\cf8 board\cf4 .\cf11 length\cf6 ][\cf8 board\cf6 [\cf12 0\cf6 ]\cf4 .\cf11 length\cf6 ]\cf4 ;\cf0 \
\cf3 		\cf2 int\cf3  \cf10 discovery\cf3  \cf4 =\cf3  \cf12 0\cf4 ;\cf0 \
\cf3 		\cf2 int\cf6 []\cf3  \cf10 q\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf2 int\cf6 [\cf8 board\cf4 .\cf11 length\cf4 *\cf8 board\cf6 [\cf12 0\cf6 ]\cf4 .\cf11 length\cf6 ]\cf4 ;\cf3 	\cf9 // initialize everything to be used\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 int\cf3  \cf10 start\cf3  \cf4 =\cf3  
\f1\i \cf13 convertPosToInt
\f0\i0 \cf6 (\cf12 0\cf4 ,\cf12 0\cf4 ,\cf8 board\cf6 )\cf4 ;\cf3 	\cf9 // create a starting point with only positions\cf0 \
\cf3 		\cf2 int\cf3  \cf10 index\cf3  \cf4 =\cf3  \cf12 0\cf4 ;\cf0 \
\cf3 		\cf14 q\cf6 [\cf14 index\cf6 ]\cf4 =\cf14 start\cf4 ;\cf3 	\cf9 // add it to the queue\cf0 \
\cf3 		\cf14 visited\cf6 [\cf12 0\cf6 ][\cf12 0\cf6 ]\cf4 =\cf2 true\cf4 ;\cf3 	\cf9 // AFTER adding, set visited to true\cf0 \
\cf3 		\cf2 while\cf6 (\cf14 q\cf6 [\cf14 index\cf6 ]\cf4 !=\cf12 0\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 			\cf2 int\cf3  \cf10 indexPtr\cf3  \cf4 =\cf3  \cf14 index\cf4 ;\cf0 \
\cf3 			\cf2 while\cf6 (\cf14 q\cf6 [\cf14 indexPtr\cf6 ]\cf4 !=\cf12 0\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf14 indexPtr\cf4 ++;\cf0 \
\cf3 			\cf6 \}\cf0 \
\cf3 			\cf2 int\cf3  \cf10 tempIndexPtr\cf3  \cf4 =\cf3  \cf14 indexPtr\cf4 ;\cf0 \
\cf3 			\cf2 for\cf6 (\cf2 int\cf3  \cf10 i\cf3  \cf4 =\cf3  \cf14 index\cf4 ;\cf3  \cf14 i\cf3  \cf4 <\cf3  \cf14 indexPtr\cf4 ;\cf3  \cf14 i\cf4 ++\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf2 int\cf3  \cf10 toCheck\cf3  \cf4 =\cf3  \cf14 q\cf6 [\cf14 i\cf6 ]\cf4 ;\cf0 \
\cf3 				\cf0 \
\cf3 				\cf9 // 3, 4, 9, 2, 9, 1, 2\cf0 \
\cf3 				\cf2 int\cf3  \cf10 iPos\cf3  \cf4 =\cf3  
\f1\i \cf13 convertIntToIPos
\f0\i0 \cf6 (\cf14 toCheck\cf4 ,\cf3  \cf8 board\cf6 )\cf4 ;\cf0 \
\cf3 				\cf2 int\cf3  \cf10 jPos\cf3  \cf4 =\cf3  
\f1\i \cf13 convertIntToJPos
\f0\i0 \cf6 (\cf14 toCheck\cf4 ,\cf3  \cf8 board\cf6 )\cf4 ;\cf0 \
\cf3 				\cf2 int\cf3  \cf10 jump\cf3  \cf4 =\cf3  \cf8 board\cf6 [\cf14 iPos\cf6 ][\cf14 jPos\cf6 ]\cf4 ;\cf3 	\cf9 // extract all information needed\cf0 \
\cf3 				\cf0 \
\cf3 				\cf2 if\cf6 (\cf14 iPos\cf3  \cf4 ==\cf3  \cf8 board\cf4 .\cf11 length\cf4 -\cf12 1\cf3  \cf4 &&\cf3  \cf14 jPos\cf3  \cf4 ==\cf8 board\cf6 [\cf12 0\cf6 ]\cf4 .\cf11 length\cf4 -\cf12 1\cf6 )\cf3  \cf2 return\cf3  \cf14 discovery\cf4 ;\cf0 \
\cf3 				\cf0 \
\cf3 				\cf14 tempIndexPtr\cf3  \cf4 =\cf3  \cf15 addToQ\cf6 (\cf14 iPos\cf4 ,\cf3  \cf14 jPos\cf4 ,\cf3  \cf14 jump\cf4 ,\cf3  \cf14 q\cf4 ,\cf3  \cf14 visited\cf4 ,\cf3  \cf8 board\cf4 ,\cf3  \cf14 tempIndexPtr\cf6 )\cf4 ;\cf0 \
\cf3 			\cf6 \}\cf0 \
\cf3 			\cf14 index\cf3  \cf4 =\cf3  \cf14 indexPtr\cf4 ;\cf0 \
\cf3 			\cf14 discovery\cf4 ++;\cf0 \
\
\cf3 		\cf6 \}\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 return\cf3  \cf4 -\cf12 1\cf4 ;\cf3  \cf9 // if can't find a path\cf0 \
\cf3 	\cf6 \}\cf0 \
\cf3 	\cf0 \
\
\cf3 	\cf2 private\cf3  \cf2 int\cf3  \cf7 addToQ\cf6 (\cf2 int\cf3  \cf8 iPos\cf4 ,\cf3  \cf2 int\cf3  \cf8 jPos\cf4 ,\cf3  \cf2 int\cf3  \cf8 jump\cf4 ,\cf3  \cf2 int\cf6 []\cf3  \cf8 q\cf4 ,\cf3  \cf2 boolean\cf6 [][]\cf3  \cf8 visited\cf4 ,\cf3  \cf2 int\cf6 [][]\cf3  \cf8 board\cf4 ,\cf3  \cf2 int\cf3  \cf8 i\cf6 )\cf3  \cf6 \{\cf0 \
\
\cf3 		\cf2 try\cf3  \cf6 \{\cf3 	\cf9 // top\cf0 \
\cf3 			\cf2 boolean\cf3  \cf10 isVisited\cf3  \cf4 =\cf3  \cf8 visited\cf6 [\cf8 iPos\cf4 -\cf8 jump\cf6 ][\cf8 jPos\cf6 ]\cf4 ;\cf0 \
\cf3 			\cf2 if\cf6 (\cf4 !\cf14 isVisited\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf2 int\cf3  \cf10 toAdd\cf3  \cf4 =\cf3  
\f1\i \cf13 convertPosToInt
\f0\i0 \cf6 (\cf8 iPos\cf4 -\cf8 jump\cf4 ,\cf8 jPos\cf4 ,\cf3  \cf8 board\cf6 )\cf4 ;\cf0 \
\cf3 				\cf8 q\cf6 [\cf8 i\cf6 ]\cf4 =\cf14 toAdd\cf4 ;\cf0 \
\cf3 				\cf8 visited\cf6 [\cf8 iPos\cf4 -\cf8 jump\cf6 ][\cf8 jPos\cf6 ]\cf4 =\cf2 true\cf4 ;\cf0 \
\cf3 				\cf8 i\cf4 ++;\cf0 \
\cf3 			\cf6 \}\cf0 \
\
\cf3 		\cf6 \}\cf3  \cf2 catch\cf3  \cf6 (\cf5 Exception\cf3  \cf10 e\cf6 )\cf3  \cf6 \{\}\cf0 \
\cf3 		\cf2 try\cf3  \cf6 \{\cf3 	\cf9 // bottom\cf0 \
\cf3 			\cf2 boolean\cf3  \cf10 isVisited\cf3  \cf4 =\cf3  \cf8 visited\cf6 [\cf8 iPos\cf4 +\cf8 jump\cf6 ][\cf8 jPos\cf6 ]\cf4 ;\cf0 \
\cf3 			\cf2 if\cf6 (\cf4 !\cf14 isVisited\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf2 int\cf3  \cf10 toAdd\cf3  \cf4 =\cf3  
\f1\i \cf13 convertPosToInt
\f0\i0 \cf6 (\cf8 iPos\cf4 +\cf8 jump\cf4 ,\cf8 jPos\cf4 ,\cf8 board\cf6 )\cf4 ;\cf0 \
\cf3 				\cf8 q\cf6 [\cf8 i\cf6 ]\cf4 =\cf14 toAdd\cf4 ;\cf0 \
\cf3 				\cf8 visited\cf6 [\cf8 iPos\cf4 +\cf8 jump\cf6 ][\cf8 jPos\cf6 ]\cf4 =\cf2 true\cf4 ;\cf0 \
\cf3 				\cf8 i\cf4 ++;\cf0 \
\cf3 			\cf6 \}\cf0 \
\
\cf3 		\cf6 \}\cf3  \cf2 catch\cf3  \cf6 (\cf5 Exception\cf3  \cf10 e\cf6 )\cf3  \cf6 \{\}\cf0 \
\cf3 		\cf2 try\cf3  \cf6 \{\cf3 	\cf9 // left\cf0 \
\cf3 			\cf2 boolean\cf3  \cf10 isVisited\cf3  \cf4 =\cf3  \cf8 visited\cf6 [\cf8 iPos\cf6 ][\cf8 jPos\cf4 -\cf8 jump\cf6 ]\cf4 ;\cf0 \
\cf3 			\cf2 if\cf6 (\cf4 !\cf14 isVisited\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf2 int\cf3  \cf10 toAdd\cf3  \cf4 =\cf3  
\f1\i \cf13 convertPosToInt
\f0\i0 \cf6 (\cf8 iPos\cf4 ,\cf8 jPos\cf4 -\cf8 jump\cf4 ,\cf8 board\cf6 )\cf4 ;\cf0 \
\cf3 				\cf8 q\cf6 [\cf8 i\cf6 ]\cf4 =\cf14 toAdd\cf4 ;\cf0 \
\cf3 				\cf8 visited\cf6 [\cf8 iPos\cf6 ][\cf8 jPos\cf4 -\cf8 jump\cf6 ]\cf4 =\cf2 true\cf4 ;\cf0 \
\cf3 				\cf8 i\cf4 ++;\cf0 \
\cf3 			\cf6 \}\cf0 \
\
\cf3 		\cf6 \}\cf3  \cf2 catch\cf3  \cf6 (\cf5 Exception\cf3  \cf10 e\cf6 )\cf3  \cf6 \{\}\cf0 \
\cf3 		\cf2 try\cf3  \cf6 \{\cf3 	\cf9 // right\cf0 \
\cf3 			\cf2 boolean\cf3  \cf10 isVisited\cf3  \cf4 =\cf3  \cf8 visited\cf6 [\cf8 iPos\cf6 ][\cf8 jPos\cf4 +\cf8 jump\cf6 ]\cf4 ;\cf0 \
\cf3 			\cf2 if\cf6 (\cf4 !\cf14 isVisited\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf2 int\cf3  \cf10 toAdd\cf3  \cf4 =\cf3  
\f1\i \cf13 convertPosToInt
\f0\i0 \cf6 (\cf8 iPos\cf4 ,\cf8 jPos\cf4 +\cf8 jump\cf4 ,\cf8 board\cf6 )\cf4 ;\cf0 \
\cf3 				\cf8 q\cf6 [\cf8 i\cf6 ]\cf4 =\cf14 toAdd\cf4 ;\cf0 \
\cf3 				\cf8 visited\cf6 [\cf8 iPos\cf6 ][\cf8 jPos\cf4 +\cf8 jump\cf6 ]\cf4 =\cf2 true\cf4 ;\cf0 \
\cf3 				\cf8 i\cf4 ++;\cf0 \
\cf3 			\cf6 \}\cf0 \
\
\cf3 		\cf6 \}\cf3  \cf2 catch\cf3  \cf6 (\cf5 Exception\cf3  \cf10 e\cf6 )\cf3  \cf6 \{\}\cf0 \
\cf3 		\cf2 return\cf3  \cf8 i\cf4 ;\cf0 \
\cf3 	\cf6 \}\cf0 \
\
\cf3 	\cf2 public\cf3  \cf2 void\cf3  \cf7 test\cf6 (\cf5 String\cf3  \cf8 filename\cf6 )\cf3  \cf2 throws\cf3  \cf5 FileNotFoundException\cf6 \{\cf0 \
\cf3 		\cf5 Scanner\cf3  \cf10 sc\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf15 Scanner\cf6 (\cf2 new\cf3  \cf15 File\cf6 (\cf8 filename\cf6 ))\cf4 ;\cf0 \
\cf3 		\cf2 int\cf3  \cf10 num_rows\cf3  \cf4 =\cf3  \cf14 sc\cf4 .\cf15 nextInt\cf6 ()\cf4 ;\cf0 \
\cf3 		\cf2 int\cf3  \cf10 num_columns\cf3  \cf4 =\cf3  \cf14 sc\cf4 .\cf15 nextInt\cf6 ()\cf4 ;\cf0 \
\cf3 		\cf2 int\cf3  \cf6 [][]\cf10 board\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf2 int\cf6 [\cf14 num_rows\cf6 ][\cf14 num_columns\cf6 ]\cf4 ;\cf0 \
\cf3 		\cf2 for\cf3  \cf6 (\cf2 int\cf3  \cf10 i\cf4 =\cf12 0\cf4 ;\cf3  \cf14 i\cf4 <\cf14 num_rows\cf4 ;\cf3  \cf14 i\cf4 ++\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 			\cf2 char\cf3  \cf10 line\cf6 []\cf3  \cf4 =\cf3  \cf14 sc\cf4 .\cf15 next\cf6 ()\cf4 .\cf15 toCharArray\cf6 ()\cf4 ;\cf0 \
\cf3 			\cf2 for\cf3  \cf6 (\cf2 int\cf3  \cf10 j\cf4 =\cf12 0\cf4 ;\cf3  \cf14 j\cf4 <\cf14 num_columns\cf4 ;\cf3  \cf14 j\cf4 ++\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf14 board\cf6 [\cf14 i\cf6 ][\cf14 j\cf6 ]\cf3  \cf4 =\cf3  \cf6 (\cf2 int\cf6 )(\cf14 line\cf6 [\cf14 j\cf6 ]\cf4 -\cf16 '0'\cf6 )\cf4 ;\cf0 \
\cf3 			\cf6 \}\cf0 \
\cf3 			\cf0 \
\cf3 		\cf6 \}\cf0 \
\cf3 		\cf14 sc\cf4 .\cf15 close\cf6 ()\cf4 ;\cf0 \
\cf3 		\cf2 int\cf3  \cf10 answer\cf3  \cf4 =\cf3  \cf15 min_moves\cf6 (\cf14 board\cf6 )\cf4 ;\cf0 \
\cf3 		\cf5 System\cf4 .
\f2\i\b \cf17 out
\f0\i0\b0 \cf4 .\cf15 println\cf6 (\cf14 answer\cf6 )\cf4 ;\cf0 \
\cf3 	\cf6 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 int\cf3  \cf7 convertIntToIPos\cf6 (\cf2 int\cf3  \cf8 wholeThing\cf4 ,\cf3  \cf2 int\cf6 [][]\cf3  \cf8 board\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 		\cf2 if\cf6 (\cf8 wholeThing\cf3  \cf4 <\cf3  \cf12 0\cf6 )\cf3  \cf2 return\cf3  \cf12 0\cf4 ;\cf0 \
\cf3 		\cf2 else\cf3  \cf6 \{\cf0 \
\cf3 			\cf2 int\cf3  \cf10 boardLengthJ\cf3  \cf4 =\cf3  \cf8 board\cf6 [\cf12 0\cf6 ]\cf4 .\cf11 length\cf4 -\cf12 1\cf4 ;\cf0 \
\cf3 			\cf2 int\cf3  \cf10 maxDigitsJ\cf3  \cf4 =\cf3  \cf12 0\cf4 ;\cf0 \
\cf3 			\cf2 while\cf6 (\cf14 boardLengthJ\cf4 !=\cf12 0\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 				\cf14 boardLengthJ\cf3  \cf4 =\cf3  \cf14 boardLengthJ\cf4 /\cf12 10\cf4 ;\cf0 \
\cf3 				\cf14 maxDigitsJ\cf4 ++;\cf0 \
\cf3 			\cf6 \}\cf0 \
\cf3 			\cf2 int\cf3  \cf10 toModulo\cf3  \cf4 =\cf3  \cf6 (\cf2 int\cf6 )\cf3  \cf5 Math\cf4 .
\f1\i \cf13 pow
\f0\i0 \cf6 (\cf12 10\cf4 ,\cf3  \cf14 maxDigitsJ\cf6 )\cf4 ;\cf3 	\cf9 // just like in the conversion to wholeInt\cf0 \
\cf3 			\cf0 \
\cf3 			\cf2 int\cf3  \cf10 justTheIPart\cf3  \cf4 =\cf3  \cf8 wholeThing\cf3  \cf4 /\cf3  \cf14 toModulo\cf4 ;\cf3 	\cf9 // returns the integer *without* the j portion\cf0 \
\cf3 			\cf2 return\cf3  \cf14 justTheIPart\cf4 ;\cf0 \
\cf3 		\cf6 \}\cf0 \
\cf3 	\cf6 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 int\cf3  \cf7 convertIntToJPos\cf6 (\cf2 int\cf3  \cf8 wholeThing\cf4 ,\cf3  \cf2 int\cf6 [][]\cf3  \cf8 board\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 		\cf2 int\cf3  \cf10 boardLengthJ\cf3  \cf4 =\cf3  \cf8 board\cf6 [\cf12 0\cf6 ]\cf4 .\cf11 length\cf4 -\cf12 1\cf4 ;\cf0 \
\cf3 		\cf2 int\cf3  \cf10 maxDigitsJ\cf3  \cf4 =\cf3  \cf12 0\cf4 ;\cf0 \
\cf3 		\cf2 while\cf6 (\cf14 boardLengthJ\cf4 !=\cf12 0\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 			\cf14 boardLengthJ\cf3  \cf4 =\cf3  \cf14 boardLengthJ\cf4 /\cf12 10\cf4 ;\cf0 \
\cf3 			\cf14 maxDigitsJ\cf4 ++;\cf0 \
\cf3 		\cf6 \}\cf0 \
\cf3 		\cf2 int\cf3  \cf10 toModulo\cf3  \cf4 =\cf3  \cf6 (\cf2 int\cf6 )\cf3  \cf5 Math\cf4 .
\f1\i \cf13 pow
\f0\i0 \cf6 (\cf12 10\cf4 ,\cf3  \cf14 maxDigitsJ\cf6 )\cf4 ;\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 if\cf6 (\cf8 wholeThing\cf3  \cf4 <\cf3  \cf12 0\cf6 )\cf3  \cf2 return\cf3  \cf4 -\cf12 1\cf4 *\cf6 (\cf8 wholeThing\cf3  \cf4 %\cf3  \cf14 toModulo\cf6 )\cf4 ;\cf0 \
\cf3 		\cf2 else\cf3  \cf2 return\cf3  \cf8 wholeThing\cf3  \cf4 %\cf3  \cf14 toModulo\cf4 ;\cf0 \
\cf3 	\cf6 \}\cf0 \
\cf3 	\cf0 \
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 int\cf3  \cf7 convertPosToInt\cf6 (\cf2 int\cf3  \cf8 iPos\cf4 ,\cf3  \cf2 int\cf3  \cf8 jPos\cf4 ,\cf3  \cf2 int\cf6 [][]\cf3  \cf8 board\cf6 )\cf3  \cf6 \{\cf0 \
\cf3 		\cf0 \
\cf3 		\cf2 int\cf3  \cf10 maxDigitsJ\cf3  \cf4 =\cf3  \cf12 0\cf4 ;\cf3  \cf2 int\cf3  \cf10 temp\cf3  \cf4 =\cf3  \cf8 board\cf6 [\cf12 0\cf6 ]\cf4 .\cf11 length\cf4 -\cf12 1\cf4 ;\cf0 \
\cf3 		\cf2 while\cf6 (\cf14 temp\cf4 !=\cf12 0\cf6 )\{\cf0 \
\cf3 			\cf14 temp\cf3  \cf4 =\cf3  \cf14 temp\cf4 /\cf12 10\cf4 ;\cf0 \
\cf3 			\cf14 maxDigitsJ\cf4 ++;\cf0 \
\cf3 		\cf6 \}\cf0 \
\cf3 		\cf2 int\cf3  \cf10 tensMultiplier\cf3  \cf4 =\cf3  \cf6 (\cf2 int\cf6 )\cf3  \cf5 Math\cf4 .
\f1\i \cf13 pow
\f0\i0 \cf6 (\cf12 10\cf4 ,\cf3  \cf14 maxDigitsJ\cf6 )\cf4 ;\cf0 \
\cf3  		\cf2 if\cf6 (\cf8 iPos\cf4 ==\cf12 0\cf6 )\cf3  \cf2 return\cf3  \cf4 -\cf12 1\cf4 *\cf14 tensMultiplier\cf4 -\cf8 jPos\cf4 ;\cf0 \
\cf3 		\cf2 else\cf3  \cf2 return\cf3  \cf8 iPos\cf4 *\cf14 tensMultiplier\cf4 +\cf8 jPos\cf4 ;\cf0 \
\cf3 	\cf6 \}\cf0 \
\
\cf3 	\cf2 public\cf3  \cf2 static\cf3  \cf2 void\cf3  \cf7 main\cf6 (\cf5 String\cf6 []\cf3  \cf8 args\cf6 )\cf3  \cf2 throws\cf3  \cf5 FileNotFoundException\cf6 \{\cf0 \
\cf3 		\cf5 Honors\cf3  \cf10 honors\cf3  \cf4 =\cf3  \cf2 new\cf3  \cf15 Honors\cf6 ()\cf4 ;\cf0 \
\cf9 //		honors.test(args[0]); // run 'javac Honors.java' to compile, then run 'java Honors testfilename'\cf0 \
\cf9 //		int[][] test = new int[500][500];\cf0 \
\cf9 //		int wholeThing1 = convertPosToInt(0, 0, test);	// 5 and 49 work\cf0 \
\cf9 //		\cf0 \
\cf9 //		int iPos = convertIntToIPos(wholeThing1, test);\cf0 \
\cf9 //		\cf0 \
\cf9 //		int jPos = convertIntToJPos(wholeThing1, test);\cf0 \
\cf3 				\cf0 \
\cf3 		\cf9 // new code - grid 15, grid 19\cf0 \
\cf3 		\cf5 String\cf3  \cf10 toTest\cf3  \cf4 =\cf3  \cf16 "/Users/jerryxia/eclipse-workspace/COMP251_A3/src/Grid-17.in"\cf4 ;\cf0 \
\cf3 		\cf14 honors\cf4 .\cf15 test\cf6 (\cf14 toTest\cf6 )\cf4 ;\cf0 \
\cf3 		\cf9 // new code\cf0 \
\cf3 	\cf6 \}\cf0 \
\
\cf6 \}\cf0 \
}