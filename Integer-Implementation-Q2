import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;

public class Honors {
	
	
	public int min_moves(int[][] board) {
		
		// use bfs (kind of like creating a graph) - don't initialize the graph
		// use bfs to create the graph - since there are a lot of nodes, maybe just edit the actual value in the graph itself

		boolean[][] visited = new boolean[board.length][board[0].length];
		int discovery = 0;
		int[] q = new int[board.length*board[0].length];	// initialize everything to be used
		
		int start = convertPosToInt(0,0,board);	// create a starting point with only positions
		int index = 0;
		q[index]=start;	// add it to the queue
		visited[0][0]=true;	// AFTER adding, set visited to true
		while(q[index]!=0) {
			int indexPtr = index;
			while(q[indexPtr]!=0) {
				indexPtr++;
			}
			int tempIndexPtr = indexPtr;
			for(int i = index; i < indexPtr; i++) {
				int toCheck = q[i];
				
				// 3, 4, 9, 2, 9, 1, 2
				int iPos = convertIntToIPos(toCheck, board);
				int jPos = convertIntToJPos(toCheck, board);
				int jump = board[iPos][jPos];	// extract all information needed
				
				if(iPos == board.length-1 && jPos ==board[0].length-1) return discovery;
				
				tempIndexPtr = addToQ(iPos, jPos, jump, q, visited, board, tempIndexPtr);
			}
			index = indexPtr;
			discovery++;

		}
		
		return -1; // if can't find a path
	}
	

	private int addToQ(int iPos, int jPos, int jump, int[] q, boolean[][] visited, int[][] board, int i) {

		try {	// top
			boolean isVisited = visited[iPos-jump][jPos];
			if(!isVisited) {
				int toAdd = convertPosToInt(iPos-jump,jPos, board);
				q[i]=toAdd;
				visited[iPos-jump][jPos]=true;
				i++;
			}

		} catch (Exception e) {}
		try {	// bottom
			boolean isVisited = visited[iPos+jump][jPos];
			if(!isVisited) {
				int toAdd = convertPosToInt(iPos+jump,jPos,board);
				q[i]=toAdd;
				visited[iPos+jump][jPos]=true;
				i++;
			}

		} catch (Exception e) {}
		try {	// left
			boolean isVisited = visited[iPos][jPos-jump];
			if(!isVisited) {
				int toAdd = convertPosToInt(iPos,jPos-jump,board);
				q[i]=toAdd;
				visited[iPos][jPos-jump]=true;
				i++;
			}

		} catch (Exception e) {}
		try {	// right
			boolean isVisited = visited[iPos][jPos+jump];
			if(!isVisited) {
				int toAdd = convertPosToInt(iPos,jPos+jump,board);
				q[i]=toAdd;
				visited[iPos][jPos+jump]=true;
				i++;
			}

		} catch (Exception e) {}
		return i;
	}

	public void test(String filename) throws FileNotFoundException{
		Scanner sc = new Scanner(new File(filename));
		int num_rows = sc.nextInt();
		int num_columns = sc.nextInt();
		int [][]board = new int[num_rows][num_columns];
		for (int i=0; i<num_rows; i++) {
			char line[] = sc.next().toCharArray();
			for (int j=0; j<num_columns; j++) {
				board[i][j] = (int)(line[j]-'0');
			}
			
		}
		sc.close();
		int answer = min_moves(board);
		System.out.println(answer);
	}
	
	public static int convertIntToIPos(int wholeThing, int[][] board) {
		if(wholeThing < 0) return 0;
		else {
			int boardLengthJ = board[0].length-1;
			int maxDigitsJ = 0;
			while(boardLengthJ!=0) {
				boardLengthJ = boardLengthJ/10;
				maxDigitsJ++;
			}
			int toModulo = (int) Math.pow(10, maxDigitsJ);	// just like in the conversion to wholeInt
			
			int justTheIPart = wholeThing / toModulo;	// returns the integer *without* the j portion
			return justTheIPart;
		}
	}
	
	public static int convertIntToJPos(int wholeThing, int[][] board) {
		int boardLengthJ = board[0].length-1;
		int maxDigitsJ = 0;
		while(boardLengthJ!=0) {
			boardLengthJ = boardLengthJ/10;
			maxDigitsJ++;
		}
		int toModulo = (int) Math.pow(10, maxDigitsJ);
		
		if(wholeThing < 0) return -1*(wholeThing % toModulo);
		else return wholeThing % toModulo;
	}
	
	public static int convertPosToInt(int iPos, int jPos, int[][] board) {
		
		int maxDigitsJ = 0; int temp = board[0].length-1;
		while(temp!=0){
			temp = temp/10;
			maxDigitsJ++;
		}
		int tensMultiplier = (int) Math.pow(10, maxDigitsJ);
 		if(iPos==0) return -1*tensMultiplier-jPos;
		else return iPos*tensMultiplier+jPos;
	}

	public static void main(String[] args) throws FileNotFoundException{
		Honors honors = new Honors();
//		honors.test(args[0]); // run 'javac Honors.java' to compile, then run 'java Honors testfilename'
//		int[][] test = new int[500][500];
//		int wholeThing1 = convertPosToInt(0, 0, test);	// 5 and 49 work
//		
//		int iPos = convertIntToIPos(wholeThing1, test);
//		
//		int jPos = convertIntToJPos(wholeThing1, test);
				
		// new code - grid 15, grid 19
		String toTest = "/Users/jerryxia/eclipse-workspace/COMP251_A3/src/Grid-17.in";
		honors.test(toTest);
		// new code
	}

}
